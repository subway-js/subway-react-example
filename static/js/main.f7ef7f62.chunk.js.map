{"version":3,"sources":["aggregates/tab/verbs/commands.js","aggregates/tab/verbs/events.js","aggregates/tab/handlers/commands.js","aggregates/tab/handlers/events.js","aggregates/tab/globals/tabStates.js","subwayRef.js","aggregates/tab/data/sampleDataGenerator.js","aggregates/tab/ui/components/table/index.js","aggregates/tab/ui/containers/restaurantFloor.js","aggregates/tab/ui/commandCreators.js","aggregates/tab/index.js","aggregates/tab/data/index.js","aggregates/kitchen/verbs/commands.js","aggregates/kitchen/verbs/events.js","aggregates/kitchen/handlers/commands.js","aggregates/kitchen/handlers/events.js","aggregates/kitchen/ui/components/order/index.js","aggregates/kitchen/ui/containers/kitchen.js","aggregates/kitchen/ui/commandCreators.js","aggregates/kitchen/index.js","aggregates/billing/ui/containers/billingTable.js","App.js","serviceWorker.js","index.js"],"names":["Commands","Events","cmdOpenTabHandler","command","handler","aggregateState","payload","events","id","cmdPlaceOrderHandler","tableId","orderedItems","food","drinks","cmdMarkDrinkServedHandler","onError","error","console","log","cmdMarkFoodServedHandler","cmdCloseTabHandler","table","servedItemsValue","tipPercentage","tip","bill","waiter","amountPaid","orderValue","evtTabOpenedHandler","proposal","tables","map","t","status","numberOfPeople","evtDrinksOrderedHandler","outstandingDrinks","evtFoodOrderedHandler","outstandingFood","evtDrinkServeddHandler","servedItems","filter","drinkMenuNumbers","i","menuNumber","nextOutstandingDrinks","drink","includes","reduce","acc","curr","price","nextTable","length","evtFoodServedHandler","foodMenuNumbers","nextOutstandingFood","evtTabClosedHandler","label","Subway","window","getRandomInt","min","max","Math","ceil","floor","random","Table","data","onSitCustomers","onPay","Card","key","color","style","minHeight","Content","Label","as","ribbon","Meta","Array","fill","v","k","Icon","name","Description","className","Statistic","size","Value","Loader","active","inline","Grid","divided","Row","columns","Column","List","Item","Header","d","loading","f","toFixed","extra","Button","basic","onClick","RestaurantFloor","useState","setTables","useEffect","tabAggregate","selectAggregate","TAB_AGGREGATE_NAME","currentState","observeState","next","nextState","simulateKitchenAndWaiter","simulateOrders","forEach","nCustomers","_","menu","foodMenu","drinksMenu","AGGREGATE_NAME","sendCommand","aggregate","kitchenAggregate","spy","setTimeout","TabCommands","simulateCustomers","waiterId","payWithTip","Date","now","Group","itemsPerRow","initialState","commandHandlers","eventHandlers","cmdAddDrinkOrderHandler","cmdAddFoodOrderHandler","cmdPrepareDrinksHandler","cmdPrepareFoodHandler","evtDrinksOrderAddeddHandler","orders","concat","evtFoodOrderAddeddHandler","evtDrinksPreparedHandler","o","evtFoodPreparedHandler","Order","orderId","onOrderReady","raised","tag","bulleted","fluid","Kitchen","setOrders","unSpyDrinks","addDrinkOrder","unSpyFood","addFoodOrder","KITCHEN_AGGREGATE_NAME","markOrderAsReady","prepareDrink","prepareFood","Container","Message","icon","BillingTable","bills","setBills","tipsTotal","setTipsTotal","tabsTotal","setTabsTotal","format","amountNumber","unSpy","prevBills","prev","fixed","singleLine","inverted","HeaderCell","Body","Cell","Footer","App","dividing","Boolean","location","hostname","match","initAggregate","cmdHandlers","evtHandlers","setCommandHandler","setEventHandler","createAggregate","TabAggregateName","tabInitialState","KitchenAggregateName","tabCommandHandlers","tabEventHandlers","kitchenCommandHandlers","kitchenEventHandlers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7ef7f62.chunk.js","sourcesContent":["export const Commands = {\n  OPEN_TAB: \"OpenTab\",\n  PLACE_ORDER: \"PlaceOrder\",\n  MARK_DRINK_SERVED: \"MarkDrinksServed\",\n  MARK_FOOD_SERVED: \"MarkFoodServed\",\n  CLOSE_TAB: \"CloseTab\"\n};\n","export const Events = {\n  TAB_OPENED: \"TabOpened\",\n  DRINKS_ORDERED: \"DrinksOrdered\",\n  FOOD_ORDERED: \"FoodOrdered\",\n  DRINK_SERVED: \"DrinksServed\",\n  FOOD_SERVED: \"FoodServed\",\n  TAB_CLOSED: \"TabClosed\"\n};\n","import { Commands } from \"../verbs/commands\";\nimport { Events } from \"../verbs/events\";\nimport { Exceptions } from \"../verbs/exceptions\";\n\nexport const cmdOpenTabHandler = {\n  command: Commands.OPEN_TAB,\n  handler: (aggregateState, payload) => {\n    return {\n      events: [{ id: Events.TAB_OPENED, payload }]\n    };\n  }\n};\n\nexport const cmdPlaceOrderHandler = {\n  command: Commands.PLACE_ORDER,\n  handler: (aggregateState, payload) => {\n    // TODO if (!aggregateState.open) throw Error(Exceptions.TAB_NOT_OPEN);\n    const { tableId } = payload;\n    const { food, drinks } = payload.orderedItems;\n    return {\n      events: [\n        { id: Events.DRINKS_ORDERED, payload: { tableId, drinks } },\n        { id: Events.FOOD_ORDERED, payload: { tableId, food } }\n      ]\n    };\n  }\n};\n\nexport const cmdMarkDrinkServedHandler = {\n  command: Commands.MARK_DRINK_SERVED,\n  handler: (aggregateState, payload) => {\n    // if (!aggregateState.open) throw Error(Exceptions.TAB_NOT_OPEN);\n    // if (aggregateState.outstandingDrinks) {\n    //   // TODO check we ordered what we are trying to serve\n    //   // if( ... ) throw Error(Exceptions.DRINKS_NOT_OUTSTANDING)\n    // } else {\n    //   throw Error(Exceptions.DRINKS_NOT_OUTSTANDING);\n    // }\n    return {\n      events: [{ id: Events.DRINK_SERVED, payload }]\n    };\n  },\n  onError: error => {\n    console.log(\"# Error sending command:\", error);\n  }\n};\n\nexport const cmdMarkFoodServedHandler = {\n  command: Commands.MARK_FOOD_SERVED,\n  handler: (aggregateState, payload) => {\n    // if (!aggregateState.open) throw Error(Exceptions.TAB_NOT_OPEN);\n    // if (aggregateState.outstandingFood) {\n    //   // TODO check we ordered what we are trying to serve\n    //   // if( ... ) throw Error(EX.DRINKS_NOT_OUTSTANDING)\n    // } else {\n    //   throw Error(Exceptions.FOOD_NOT_OUTSTANDING);\n    // }\n    return {\n      events: [{ id: Events.FOOD_SERVED, payload }]\n    };\n  }\n};\n\nexport const cmdCloseTabHandler = {\n  command: Commands.CLOSE_TAB,\n  handler: (aggregateState, payload) => {\n    const {\n      id,\n      servedItemsValue,\n      tipPercentage,\n      tip,\n      bill,\n      waiter\n    } = payload.table;\n\n    return {\n      events: [\n        {\n          id: Events.TAB_CLOSED,\n          payload: {\n            id: payload.id,\n            tableId: id,\n            amountPaid: bill,\n            orderValue: servedItemsValue,\n            tipPercentage,\n            tip,\n            waiter\n          }\n        }\n      ]\n    };\n  }\n};\n","import { Events } from \"../verbs/events\";\nimport { Exceptions } from \"../verbs/exceptions\";\nimport * as TabStates from \"../globals/tabStates\";\n\nexport const evtTabOpenedHandler = {\n  command: Events.TAB_OPENED,\n  handler: (aggregateState, payload) => {\n    return {\n      proposal: {\n        ...aggregateState,\n        tables: aggregateState.tables.map(t => {\n          if (t.id === payload.table) {\n            t.status = TabStates.OPEN;\n            t.numberOfPeople = payload.numberOfPeople;\n            t.waiter = payload.waiter;\n          }\n          return t;\n        })\n      }\n    };\n  }\n};\n\nexport const evtDrinksOrderedHandler = {\n  command: Events.DRINKS_ORDERED,\n  handler: (aggregateState, { tableId, drinks }) => {\n    return {\n      proposal: {\n        ...aggregateState, // TODO no, only partial\n        tables: aggregateState.tables.map(t => {\n          if (t.id === tableId) {\n            t.status = TabStates.WAITING_ORDER;\n            t.outstandingDrinks = drinks;\n          }\n          return t;\n        })\n      }\n    };\n  }\n};\n\nexport const evtFoodOrderedHandler = {\n  command: Events.FOOD_ORDERED,\n  handler: (aggregateState, { tableId, food }) => {\n    return {\n      proposal: {\n        ...aggregateState, // TODO no, only partial\n        tables: aggregateState.tables.map(t => {\n          if (t.id === tableId) {\n            t.status = TabStates.WAITING_ORDER;\n            t.outstandingFood = food;\n          }\n          return t;\n        })\n      }\n    };\n  }\n};\n\nexport const evtDrinkServeddHandler = {\n  command: Events.DRINK_SERVED,\n  handler: (aggregateState, { servedItems, tableId }) => {\n    const table = aggregateState.tables.filter(t => t.id === tableId)[0];\n    const drinkMenuNumbers = servedItems.map(i => i.menuNumber);\n    const nextOutstandingDrinks = table.outstandingDrinks\n      ? table.outstandingDrinks.filter(\n          drink => !drinkMenuNumbers.includes(drink.menuNumber)\n        )\n      : [];\n    const temp = table.outstandingDrinks\n      ? table.outstandingDrinks.filter(drink =>\n          drinkMenuNumbers.includes(drink.menuNumber)\n        )\n      : [];\n    const servedItemsValue = temp.reduce((acc, curr) => acc + curr.price, 0);\n    const returnValue = {\n      proposal: {\n        ...aggregateState,\n        tables: aggregateState.tables.map(t => {\n          if (t.id === tableId) {\n            let nextTable = { ...table };\n            nextTable.outstandingDrinks = nextOutstandingDrinks;\n            nextTable.servedItemsValue =\n              (nextTable.servedItemsValue || 0) + servedItemsValue;\n            if (\n              nextTable.outstandingFood.length === 0 &&\n              nextTable.outstandingDrinks.length === 0\n            ) {\n              nextTable.status = TabStates.READY_TO_PAY;\n              nextTable.tipPercentage = 12;\n              nextTable.tip =\n                nextTable.servedItemsValue * (nextTable.tipPercentage / 100);\n              nextTable.bill = nextTable.servedItemsValue + nextTable.tip;\n            }\n\n            return nextTable;\n          }\n          return t;\n        })\n      }\n    };\n    return returnValue;\n  }\n};\n\nexport const evtFoodServedHandler = {\n  command: Events.FOOD_SERVED,\n  handler: (aggregateState, { servedItems, tableId }) => {\n    const table = aggregateState.tables.filter(t => t.id === tableId)[0];\n    const foodMenuNumbers = servedItems.map(i => i.menuNumber);\n\n    const nextOutstandingFood = table.outstandingFood\n      ? table.outstandingFood.filter(\n          food => !foodMenuNumbers.includes(food.menuNumber)\n        )\n      : [];\n    const temp = table.outstandingFood\n      ? table.outstandingFood.filter(food =>\n          foodMenuNumbers.includes(food.menuNumber)\n        )\n      : [];\n    const servedItemsValue = temp.reduce((acc, curr) => acc + curr.price, 0);\n    const returnValue = {\n      proposal: {\n        ...aggregateState,\n        tables: aggregateState.tables.map(t => {\n          if (t.id === tableId) {\n            let nextTable = { ...table };\n            nextTable.outstandingFood = nextOutstandingFood;\n            nextTable.servedItemsValue =\n              (nextTable.servedItemsValue || 0) + servedItemsValue;\n            if (\n              nextTable.outstandingFood.length === 0 &&\n              nextTable.outstandingDrinks.length === 0\n            ) {\n              nextTable.status = TabStates.READY_TO_PAY;\n              nextTable.tipPercentage = 12;\n              nextTable.tip =\n                nextTable.servedItemsValue * (nextTable.tipPercentage / 100);\n              nextTable.bill = nextTable.servedItemsValue + nextTable.tip;\n            }\n\n            return nextTable;\n          }\n          return t;\n        })\n      }\n    };\n    return returnValue;\n  }\n};\n\nexport const evtTabClosedHandler = {\n  command: Events.TAB_CLOSED,\n  handler: (aggregateState, { tableId }) => {\n    return {\n      proposal: {\n        ...aggregateState,\n        tables: aggregateState.tables.map(t => {\n          if (t.id === tableId) {\n            const emptyTable = {\n              id: tableId,\n              label: t.label,\n              status: TabStates.AVAILABLE\n            };\n            return emptyTable;\n          }\n          return t;\n        })\n      }\n    };\n  }\n};\n","export const AVAILABLE = \"available\";\nexport const OPEN = \"open\";\nexport const WAITING_ORDER = \"waitingOrder\";\nexport const READY_TO_PAY = \"readyToPay\";\n","export const Subway = window.Subway;\n","import { menu } from \"./data\";\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getRandomNumberOfCustomers = () => getRandomInt(2, 6);\n\nexport const getRandomOrder = nCustomers => {\n  const food = Array(nCustomers)\n    .fill(1)\n    .map(_ => menu.foodMenu[getRandomInt(0, menu.foodMenu.length - 1)]);\n\n  const drinks = Array(nCustomers)\n    .fill(1)\n    .map(_ => menu.drinksMenu[getRandomInt(0, menu.drinksMenu.length - 1)]);\n\n  return {\n    food,\n    drinks\n  };\n};\n","import React from \"react\";\nimport {\n  Card,\n  Button,\n  Loader,\n  Icon,\n  Label,\n  List,\n  Statistic,\n  Grid\n} from \"semantic-ui-react\";\n\nimport * as TabState from \"../../../globals/tabStates\";\n\nexport function Table({ data, onSitCustomers, onPay }) {\n  if (!data) return null;\n  return (\n    <Card key={data.id} color=\"green\" style={{ minHeight: 250 }}>\n      <Card.Content>\n        <Label as=\"span\" color=\"green\" ribbon>\n          {data.label}\n        </Label>\n        <Card.Meta>\n          {data.status === TabState.AVAILABLE ? (\n            \"This table is free\"\n          ) : (\n            <span>\n              {Array(data.numberOfPeople)\n                .fill(1)\n                .map((v, k) => (\n                  <Icon key={k} color=\"green\" name=\"user\" />\n                ))}\n            </span>\n          )}\n        </Card.Meta>\n\n        <Card.Description>\n          {data.status === TabState.AVAILABLE && (\n            <div className=\"ui center aligned\">\n              <br />\n              <Statistic color=\"grey\" size=\"mini\">\n                <Statistic.Value>\n                  <Icon name=\"food\" />\n                </Statistic.Value>\n              </Statistic>\n              <br />\n            </div>\n          )}\n          {data.status === TabState.OPEN && (\n            <>\n              <br />\n              <Loader active inline=\"centered\" />\n              <br />\n            </>\n          )}\n          {data.status === TabState.WAITING_ORDER && (\n            <Grid divided=\"vertically\">\n              <Grid.Row columns={2}>\n                <Grid.Column>\n                  <List size=\"mini\">\n                    {data.outstandingDrinks &&\n                      data.outstandingDrinks.length > 0 && (\n                        <List.Item>\n                          <List.Header>Drinks:</List.Header>\n                        </List.Item>\n                      )}\n                    {data.outstandingDrinks &&\n                      data.outstandingDrinks.map((d, i) => (\n                        <List.Item key={`${data.id}_${i}_${d.menuNumber}`}>\n                          <Icon loading name=\"spinner\" /> {d.label}\n                        </List.Item>\n                      ))}\n                  </List>\n                </Grid.Column>\n                <Grid.Column>\n                  <List size=\"mini\">\n                    {data.outstandingFood && data.outstandingFood.length > 0 && (\n                      <List.Item>\n                        <List.Header>Food:</List.Header>\n                      </List.Item>\n                    )}\n                    {data.outstandingFood &&\n                      data.outstandingFood.map((f, i) => (\n                        <List.Item key={`${data.id}_${i}_${f.menuNumber}`}>\n                          <Icon loading name=\"spinner\" /> {f.label}\n                        </List.Item>\n                      ))}\n                  </List>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          )}\n          {data.status === TabState.READY_TO_PAY && (\n            <div className=\"ui center aligned\">\n              <br />\n              <Statistic color=\"green\" size=\"tiny\">\n                <Statistic.Label>\n                  {data.servedItemsValue.toFixed(2)} € + {data.tipPercentage}%\n                  tip\n                </Statistic.Label>\n                <Statistic.Label>=</Statistic.Label>\n                <Statistic.Value>{data.bill.toFixed(2)} €</Statistic.Value>\n              </Statistic>\n              <br />\n            </div>\n          )}\n        </Card.Description>\n      </Card.Content>\n\n      <Card.Content extra>\n        {data.status === TabState.OPEN && (\n          <p>Customers choosing food & drinks...</p>\n        )}\n        {data.status === TabState.AVAILABLE && (\n          <div className=\"ui two buttons\">\n            <Button basic color=\"green\" onClick={() => onSitCustomers(data)}>\n              Sit customers\n            </Button>\n          </div>\n        )}\n        {data.status === TabState.WAITING_ORDER && (\n          <p>Cooking and delivering orders...</p>\n        )}\n        {data.status === TabState.READY_TO_PAY && (\n          <div className=\"ui two buttons\">\n            <Button color=\"green\" onClick={() => onPay(data)}>\n              Pay & free table\n            </Button>\n          </div>\n        )}\n      </Card.Content>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Card } from \"semantic-ui-react\";\n\nimport { Subway } from \"../../../../subwayRef\";\nimport {\n  getRandomInt,\n  getRandomOrder,\n  getRandomNumberOfCustomers\n} from \"../../data/sampleDataGenerator\";\nimport { AGGREGATE_NAME as TAB_AGGREGATE_NAME } from \"../../\";\n\nimport * as TabCommands from \"../commandCreators\";\n\nimport { Table } from \"../components/table\";\n\nexport function RestaurantFloor() {\n  const [tables, setTables] = useState(null);\n  useEffect(() => {\n    const tabAggregate = Subway.selectAggregate(TAB_AGGREGATE_NAME);\n    const { currentState } = tabAggregate.observeState({\n      next: ({ nextState }) => {\n        console.log(\" > TAB new state:\", nextState);\n        const { tables } = nextState;\n        // TODO normalize aggregate state\n        setTables(tables);\n      }\n    });\n    console.log(\" > TAB initial state:\", currentState);\n    setTables(currentState.tables);\n\n    // simulate kitchen working on orders\n    simulateKitchenAndWaiter(tabAggregate);\n  }, []);\n\n  const simulateOrders = tables => {\n    tables &&\n      tables.forEach(t => {\n        // table \"open\": customer are sitting, waiting to order\n        if (t.status === \"open\") {\n          TabCommands.placeOrder(t.id, getRandomOrder(t.numberOfPeople));\n        }\n      });\n  };\n  const simulateKitchenAndWaiter = aggregate => {\n    const kitchenAggregate = Subway.selectAggregate(\"KitchenAggregate\");\n    kitchenAggregate.spy(\"DrinksPrepared\", {\n      next: ({ table, drinks }) => {\n        drinks.forEach(d => {\n          setTimeout(() => {\n            TabCommands.serveDrinks(table, [d]);\n          }, getRandomInt(1000, 2000));\n        });\n      }\n    });\n    kitchenAggregate.spy(\"FoodPrepared\", {\n      next: ({ table, food }) => {\n        food.forEach(f => {\n          setTimeout(() => {\n            TabCommands.serveFood(table, [f]);\n          }, getRandomInt(1000, 2000));\n        });\n      }\n    });\n  };\n\n  const simulateCustomers = ({ id }) => {\n    TabCommands.openTab(id, getRandomNumberOfCustomers(), 1);\n    setTimeout(() => simulateOrders(tables), 1000);\n  };\n\n  const payWithTip = table => {\n    TabCommands.payAndFreeTable(table);\n  };\n\n  return (\n    <Card.Group itemsPerRow={3}>\n      {tables &&\n        tables.map(t => (\n          <Table\n            onSitCustomers={simulateCustomers}\n            onPay={payWithTip}\n            key={t.id}\n            data={t}\n          />\n        ))}\n    </Card.Group>\n  );\n}\n","import { AGGREGATE_NAME } from \"../index\";\nimport { Commands } from \"../verbs/commands\";\nimport { Subway } from \"../../../subwayRef\";\n\n// const tabAggregate = Subway.selectAggregate(AGGREGATE_NAME);\n\nexport const openTab = (tableId, numberOfPeople, waiterId) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.OPEN_TAB, {\n    id: 0,\n    table: tableId,\n    numberOfPeople: numberOfPeople,\n    waiter: waiterId\n  });\n};\n\nexport const placeOrder = (tableId, orderedItems) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.PLACE_ORDER, {\n    id: 0,\n    tableId: tableId,\n    orderedItems: orderedItems\n  });\n};\n\nexport const serveFood = (tableId, food) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(\n    Commands.MARK_FOOD_SERVED,\n    {\n      id: 0,\n      tableId: tableId,\n      servedItems: food\n    }\n  );\n};\n\nexport const serveDrinks = (tableId, drinks) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(\n    Commands.MARK_DRINK_SERVED,\n    {\n      id: 0,\n      tableId: tableId,\n      servedItems: drinks\n    }\n  );\n};\n\nexport const payAndFreeTable = table => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.CLOSE_TAB, {\n    id: `BILL_${Date.now()}`,\n    table\n  });\n};\n","import { getAggregateInitialState } from \"./data\";\n\nimport {\n  cmdOpenTabHandler,\n  cmdPlaceOrderHandler,\n  cmdMarkDrinkServedHandler,\n  cmdMarkFoodServedHandler,\n  cmdCloseTabHandler\n} from \"./handlers/commands\";\n\nimport {\n  evtTabOpenedHandler,\n  evtDrinksOrderedHandler,\n  evtFoodOrderedHandler,\n  evtDrinkServeddHandler,\n  evtFoodServedHandler,\n  evtTabClosedHandler\n} from \"./handlers/events\";\n\nexport { RestaurantFloor } from \"./ui/containers/restaurantFloor\";\n\nexport const AGGREGATE_NAME = \"TabAggregate\";\nexport const initialState = getAggregateInitialState();\n\nexport const commandHandlers = [\n  cmdOpenTabHandler,\n  cmdPlaceOrderHandler,\n  cmdMarkDrinkServedHandler,\n  cmdMarkFoodServedHandler,\n  cmdCloseTabHandler\n];\n\nexport const eventHandlers = [\n  evtTabOpenedHandler,\n  evtDrinksOrderedHandler,\n  evtFoodOrderedHandler,\n  evtDrinkServeddHandler,\n  evtFoodServedHandler,\n  evtTabClosedHandler\n];\n","import { tables } from \"./data\";\n\nexport const getAggregateInitialState = () => ({\n  tables: tables.map(t => ({ ...t, status: \"available\" }))\n});\n","export const Commands = {\n  ADD_DRINK_ORDER: \"AddDrinkOrder\",\n  ADD_FOOD_ORDER: \"AddFoodOrder\",\n  PREPARE_DRINKS: \"PrepareDrinks\",\n  PREPARE_FOOD: \"PrepareFood\"\n};\n","export const Events = {\n  DRINKS_ORDER_ADDED: \"DrinksOrderAdded\",\n  FOOD_ORDER_ADDED: \"FoodOrderAdded\",\n  DRINKS_PREPARED: \"DrinksPrepared\",\n  FOOD_PREPARED: \"FoodPrepared\"\n};\n","import { Commands } from \"../verbs/commands\";\nimport { Events } from \"../verbs/events\";\n\nexport const cmdAddDrinkOrderHandler = {\n  command: Commands.ADD_DRINK_ORDER,\n  handler: (aggregateState, payload) => {\n    return {\n      events: [{ id: Events.DRINKS_ORDER_ADDED, payload }]\n    };\n  }\n};\n\nexport const cmdAddFoodOrderHandler = {\n  command: Commands.ADD_FOOD_ORDER,\n  handler: (aggregateState, payload) => {\n    return {\n      events: [{ id: Events.FOOD_ORDER_ADDED, payload }]\n    };\n  }\n};\n\nexport const cmdPrepareDrinksHandler = {\n  command: Commands.PREPARE_DRINKS,\n  handler: (aggregateState, payload) => {\n    return {\n      events: [{ id: Events.DRINKS_PREPARED, payload }]\n    };\n  }\n};\n\nexport const cmdPrepareFoodHandler = {\n  command: Commands.PREPARE_FOOD,\n  handler: (aggregateState, payload) => {\n    return {\n      events: [{ id: Events.FOOD_PREPARED, payload }]\n    };\n  }\n};\n","import { Events } from \"../verbs/events\";\n\nexport const evtDrinksOrderAddeddHandler = {\n  command: Events.DRINKS_ORDER_ADDED,\n  handler: (aggregateState, payload) => {\n    return {\n      proposal: {\n        ...aggregateState,\n        orders: aggregateState.orders.concat(payload)\n      }\n    };\n  }\n};\n\nexport const evtFoodOrderAddeddHandler = {\n  command: Events.FOOD_ORDER_ADDED,\n  handler: (aggregateState, payload) => {\n    return {\n      proposal: {\n        ...aggregateState,\n        orders: aggregateState.orders.concat(payload)\n      }\n    };\n  }\n};\n\nexport const evtDrinksPreparedHandler = {\n  command: Events.DRINKS_PREPARED,\n  handler: (aggregateState, payload) => {\n    return {\n      proposal: {\n        ...aggregateState,\n        orders: aggregateState.orders.filter(o => o.id !== payload.id)\n      }\n    };\n  }\n};\n\nexport const evtFoodPreparedHandler = {\n  command: Events.FOOD_PREPARED,\n  handler: (aggregateState, payload) => {\n    return {\n      proposal: {\n        ...aggregateState,\n        orders: aggregateState.orders.filter(o => o.id !== payload.id)\n      }\n    };\n  }\n};\n","import React from \"react\";\nimport { Card, Button, Icon, Label, List } from \"semantic-ui-react\";\n\nexport function Order({\n  orderId,\n  tableId,\n  drinks = null,\n  food = null,\n  onOrderReady\n}) {\n  return (\n    <Card key={orderId} raised>\n      <Card.Content>\n        <Label as=\"span\" tag color=\"brown\">\n          <Icon key={orderId} name={drinks ? \"glass martini\" : \"food\"} />\n          for table {tableId}\n        </Label>\n        <List bulleted size=\"mini\">\n          {drinks &&\n            drinks.map((d, i) => <List.Item key={i}>{d.label}</List.Item>)}\n          {food && food.map((d, i) => <List.Item key={i}>{d.label}</List.Item>)}\n        </List>\n      </Card.Content>\n      <Card.Content extra>\n        <Button\n          size=\"mini\"\n          fluid\n          basic\n          color=\"brown\"\n          onClick={() => onOrderReady(orderId, tableId, drinks, food)}\n        >\n          Mark as ready\n        </Button>\n      </Card.Content>\n    </Card>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Card, Icon, Message, Container } from \"semantic-ui-react\";\n\nimport { Subway } from \"../../../../subwayRef\";\nimport { AGGREGATE_NAME as KITCHEN_AGGREGATE_NAME } from \"../../\";\n\nimport {\n  addDrinkOrder,\n  addFoodOrder,\n  prepareDrink,\n  prepareFood\n} from \"../commandCreators\";\n\nimport { Order } from \"../components/order\";\n\nexport function Kitchen() {\n  const [orders, setOrders] = useState(null);\n  useEffect(() => {\n    const unSpyDrinks = Subway.selectAggregate(\"TabAggregate\").spy(\n      \"DrinksOrdered\",\n      {\n        next: ({ tableId, drinks }) => {\n          addDrinkOrder(tableId, drinks);\n        }\n      }\n    );\n\n    const unSpyFood = Subway.selectAggregate(\"TabAggregate\").spy(\n      \"FoodOrdered\",\n      {\n        next: ({ tableId, food }) => {\n          addFoodOrder(tableId, food);\n        }\n      }\n    );\n\n    const kitchenAggregate = Subway.selectAggregate(KITCHEN_AGGREGATE_NAME);\n    const { currentState } = kitchenAggregate.observeState({\n      next: ({ nextState }) => {\n        const { orders } = nextState;\n        setOrders(orders);\n      }\n    });\n    setOrders(currentState.orders);\n\n    return () => {\n      unSpyDrinks();\n      unSpyFood();\n    };\n  }, []);\n\n  const markOrderAsReady = (orderId, tableId, drinks, food) => {\n    drinks && prepareDrink(orderId, tableId, drinks);\n    food && prepareFood(orderId, tableId, food);\n  };\n  return (\n    <>\n      {!orders ||\n        (orders.length === 0 && (\n          <Container>\n            <Message color=\"brown\" size=\"mini\" icon>\n              <Icon name=\"circle notched\" loading />\n              <Message.Content>\n                <Message.Header>Waiting</Message.Header>\n                There are no pending orders to fulfill...\n              </Message.Content>\n            </Message>\n          </Container>\n        ))}\n      {orders && (\n        <Card.Group itemsPerRow={3}>\n          {orders.map(({ id, table, drinks, food }, i) => (\n            <Order\n              key={i}\n              orderId={id}\n              tableId={table}\n              drinks={drinks}\n              food={food}\n              onOrderReady={markOrderAsReady}\n            />\n          ))}\n        </Card.Group>\n      )}\n    </>\n  );\n}\n","import { AGGREGATE_NAME } from \"../index\";\nimport { Commands } from \"../verbs/commands\";\nimport { Subway } from \"../../../subwayRef\";\n\nexport const addDrinkOrder = (tableId, drinks) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.ADD_DRINK_ORDER, {\n    id: `D${Date.now()}`,\n    table: tableId,\n    drinks\n  });\n};\n\nexport const addFoodOrder = (tableId, food) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.ADD_FOOD_ORDER, {\n    id: `F${Date.now()}`,\n    table: tableId,\n    food\n  });\n};\n\nexport const prepareDrink = (orderId, tableId, drinks) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.PREPARE_DRINKS, {\n    id: orderId,\n    table: tableId,\n    drinks\n  });\n};\n\nexport const prepareFood = (orderId, tableId, food) => {\n  Subway.selectAggregate(AGGREGATE_NAME).sendCommand(Commands.PREPARE_FOOD, {\n    id: orderId,\n    table: tableId,\n    food\n  });\n};\n","import {\n  cmdAddDrinkOrderHandler,\n  cmdAddFoodOrderHandler,\n  cmdPrepareDrinksHandler,\n  cmdPrepareFoodHandler\n} from \"./handlers/commands\";\n\nimport {\n  evtDrinksOrderAddeddHandler,\n  evtFoodOrderAddeddHandler,\n  evtDrinksPreparedHandler,\n  evtFoodPreparedHandler\n} from \"./handlers/events\";\n\nexport { Kitchen } from \"./ui/containers/kitchen\";\n\nexport const AGGREGATE_NAME = \"KitchenAggregate\";\nexport const initialState = { orders: [] };\n\nexport const commandHandlers = [\n  cmdAddDrinkOrderHandler,\n  cmdAddFoodOrderHandler,\n  cmdPrepareDrinksHandler,\n  cmdPrepareFoodHandler\n];\n\nexport const eventHandlers = [\n  evtDrinksOrderAddeddHandler,\n  evtFoodOrderAddeddHandler,\n  evtDrinksPreparedHandler,\n  evtFoodPreparedHandler\n];\n","import React, { useEffect, useState } from \"react\";\nimport { Table, Container, Message, Icon } from \"semantic-ui-react\";\n\nimport { Subway } from \"../../../../subwayRef\";\n\nexport function BillingTable() {\n  const [bills, setBills] = useState([]);\n  const [tipsTotal, setTipsTotal] = useState(0);\n  const [tabsTotal, setTabsTotal] = useState(0);\n\n  const format = amountNumber => amountNumber.toFixed(2) + \"€\";\n\n  useEffect(() => {\n    const unSpy = Subway.selectAggregate(\"TabAggregate\").spy(\"TabClosed\", {\n      next: ({ id, tableId, orderValue, amountPaid, tip }) => {\n        setBills(prevBills => {\n          return [...prevBills, { id, tableId, orderValue, amountPaid, tip }];\n        });\n        setTipsTotal(prev => prev + tip);\n        setTabsTotal(prev => prev + orderValue);\n      }\n    });\n    return () => {\n      unSpy();\n    };\n  }, []);\n\n  return (\n    <>\n      {!bills ||\n        (bills.length === 0 && (\n          <Container>\n            <Message color=\"blue\" size=\"mini\" icon>\n              <Icon name=\"circle notched\" loading />\n              <Message.Content>\n                <Message.Header>Waiting</Message.Header>\n                No bills processed yet...\n              </Message.Content>\n            </Message>\n          </Container>\n        ))}\n      {bills && bills.length > 0 && (\n        <Table color=\"blue\" fixed singleLine inverted size=\"small\">\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Table ID</Table.HeaderCell>\n              <Table.HeaderCell>Amount Paid</Table.HeaderCell>\n              <Table.HeaderCell>Order Value</Table.HeaderCell>\n              <Table.HeaderCell>Tip</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {bills &&\n              bills.map(({ id, tableId, orderValue, amountPaid, tip }, i) => (\n                <Table.Row key={id}>\n                  <Table.Cell>{tableId}</Table.Cell>\n                  <Table.Cell>{format(amountPaid)}</Table.Cell>\n                  <Table.Cell>{format(orderValue)}</Table.Cell>\n                  <Table.Cell>{format(tip)}</Table.Cell>\n                </Table.Row>\n              ))}\n          </Table.Body>\n\n          <Table.Footer>\n            <Table.Row>\n              <Table.HeaderCell />\n              <Table.HeaderCell />\n              <Table.HeaderCell>\n                Total paid: <b>{format(tabsTotal)}</b>\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n                Total tips: <b>{format(tipsTotal)}</b>\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Footer>\n        </Table>\n      )}\n      <br />\n    </>\n  );\n}\n","import React from \"react\";\nimport { Container, Header } from \"semantic-ui-react\";\n\nimport { RestaurantFloor } from \"./aggregates/tab\";\nimport { Kitchen } from \"./aggregates/kitchen\";\nimport { BillingTable } from \"./aggregates/billing\";\n\nfunction App() {\n  return (\n    <Container>\n      <br />\n      <Header color=\"green\" as=\"h4\" dividing>\n        Tables\n      </Header>\n      <RestaurantFloor />\n\n      <Header color=\"brown\" as=\"h4\" dividing>\n        Kitchen\n      </Header>\n      <Kitchen />\n\n      <Header color=\"blue\" as=\"h4\" dividing>\n        Billing\n      </Header>\n      <BillingTable />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Subway } from \"./subwayRef\"; // TODO create react helper\nimport {\n  AGGREGATE_NAME as TabAggregateName,\n  initialState as tabInitialState,\n  commandHandlers as tabCommandHandlers,\n  eventHandlers as tabEventHandlers\n} from \"./aggregates/tab\";\n\nimport {\n  AGGREGATE_NAME as KitchenAggregateName,\n  initialState as kitchenInitialState,\n  commandHandlers as kitchenCommandHandlers,\n  eventHandlers as kitchenEventHandlers\n} from \"./aggregates/kitchen\";\n\nconst initAggregate = (aggregate, cmdHandlers, evtHandlers) => {\n  cmdHandlers.forEach(({ command, handler, onError = null }) => {\n    aggregate.setCommandHandler(command, handler, onError);\n  });\n  evtHandlers.forEach(({ command, handler, onError = null }) => {\n    aggregate.setEventHandler(command, handler, onError);\n  });\n};\n\nconst tabAggregate = Subway.createAggregate(TabAggregateName, tabInitialState);\n\nconst kitchenAggregate = Subway.createAggregate(\n  KitchenAggregateName,\n  kitchenInitialState\n);\n\ninitAggregate(tabAggregate, tabCommandHandlers, tabEventHandlers);\ninitAggregate(kitchenAggregate, kitchenCommandHandlers, kitchenEventHandlers);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}